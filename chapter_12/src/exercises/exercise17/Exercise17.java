/**
 * (Game: hangman) Rewrite Programming Exercise 7.35. The program reads the
 * words stored in a text file named hangman.txt. Words are delimited by spaces.
 */
package exercises.exercise17;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Exercise17 {

    public static void main(String[] args) {

        File file = new File("D:\\Workspace\\chapter_12\\src\\exercises\\exercise17\\hangman.txt");

        if (!file.exists()) {
            System.out.println("File does not exist");
            System.exit(1);
        }

        Scanner scanner = new Scanner(System.in);

        List<String> words = getWords(file);
        String wordFromList = getWordFromList(words).toLowerCase();

        char[] guessedWord = getChars(wordFromList);

        boolean continueLoop = true;
        int misses = 0;

        List<Character> previousGuesses = new ArrayList<>();

        while (continueLoop) {

            System.out.print("(Guess) Enter a letter in word " + new String(guessedWord) + ": ");
            String input = scanner.nextLine().toLowerCase();

            if (input.isEmpty()) {
                System.out.print("(Guess) Enter a letter in word " + new String(guessedWord) + ": ");
                input = scanner.nextLine().toLowerCase();
            }

            char ch = input.charAt(0);

            if (previousGuesses.contains(ch)) {
                System.out.println(ch + " is already guessed.");
                continue;
            }

            previousGuesses.add(ch);

            if (isLetterInWord(wordFromList, ch)) {
                updateGuessedWord(wordFromList, guessedWord, ch);
            } else {
                System.out.println(ch + " is not in the word.");
                misses++;
            }

            if (isWordGuessed(guessedWord)) {

                System.out.println("The word is " + wordFromList + ". You missed " + misses + " time(s).");
                System.out.println("Do you want to guess another word? Enter y or n: ");

                String answer = scanner.nextLine();

                if (answer.equalsIgnoreCase("n")) {
                    continueLoop = false;
                } else {
                    wordFromList = getWordFromList(words).toLowerCase();
                    guessedWord = new char[wordFromList.length()];

                    Arrays.fill(guessedWord, '*');
                    misses = 0;
                    previousGuesses.clear();
                }
            }
        }

        scanner.close();
    }

    private static char[] getChars(String wordFromList) {
        char[] guessedWord = new char[wordFromList.length()];
        Arrays.fill(guessedWord, '*');
        return guessedWord;
    }

    /**
     * Read the words from file and add to list
     */
    public static List<String> getWords(File file) {
        List<String> words = new ArrayList<>();

        try (Scanner scanner = new Scanner(file)) {
            while (scanner.hasNext()) {
                String line = scanner.nextLine();
                String[] wordsArray = line.split(" ");
                words.addAll(Arrays.asList(wordsArray));
            }
        } catch (FileNotFoundException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        }
        return words;
    }

    /**
     * Generate a random number based on the words list size
     */
    public static int generateRandomNumber(List<String> words) {
        return (int) (Math.random() * words.size());
    }

    /**
     * Pick a random word from the index generated by generateRandomNumber()
     */
    public static String getWordFromList(List<String> words) {
        return words.get(generateRandomNumber(words));
    }

    /**
     * Verify if the letter took as input exists in word
     */
    public static boolean isLetterInWord(String word, char letter) {
        return word.indexOf(letter) >= 0;
    }

    /**
     * Update the guessedWord array with the correctly guessed character
     */
    public static void updateGuessedWord(String wordFromList, char[] guessedWord, char ch) {

        for (int i = 0; i < wordFromList.length(); i++) {

            if (wordFromList.charAt(i) == ch) {
                guessedWord[i] = ch;
            }
        }
    }

    /**
     * Check if the word has been completely guessed
     */
    public static boolean isWordGuessed(char[] guessedWord) {
        for (char c : guessedWord) {
            if (c == '*') {
                return false;
            }
        }
        return true;
    }
}
